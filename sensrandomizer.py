import tkinter as tk
from tkinter import ttk, filedialog, font
import re
import json
import random
import keyboard
import os
from os import path
import icon
import base64
import time
import threading
import webbrowser


def select_folder():
    gameDirPath = filedialog.askdirectory()
    directory.set(gameDirPath)


def validate_number_input(text):
    return re.match(r'^\d*\.?\d{0,2}$', text) is not None or text == ""


def validate_purenumber_input(text):
    return text.isdigit() or text == ""


running = False


def toggle():
    global running
    running = not running
    # List of widgets that will be disabled by the for loop below
    disabledElementsWhileRunning = [gameDir, selectFolder, dpiEntry, minSensEntry,
                                    maxSensEntry, autoexecButton, baseSensEntry,
                                    randomizeBindButton, enableBindButton, disableBindButton,
                                    useTimerBox, timerIntervalEntry,
                                    modifierBoxAlt, modifierBoxCtrl, modifierBoxShift]
    
    for element in disabledElementsWhileRunning:
        element.configure(state=stateToggle[running])
    runButton.configure(text=btnText[running], bg=btnColor[running], activebackground=btnActive[0])
    if randomizeBind.get() == "Invalid":
        outputSensLabel.configure(text="Invalid binds!")
    elif randomizeBind.get() == "Bind":
        outputSensLabel.configure(text="Key not bound!")
    else:
        outputSensLabel.configure(text=sensStateToggle[running])
    print(btnText[running])


def randomize():
    minFloat = float(minSensEntry.get())
    maxFloat = float(maxSensEntry.get())
    initRNG = random.uniform(minFloat, maxFloat)
    actualSensNum = round(initRNG, 2)
    floatSens = float(actualSensNum)
    print(f"{floatSens:.2f}")
    cmRev = str(round((360 / (0.022 * int(dpi.get()) * floatSens)) * 2.54, 1))
    formattedSens = cmRev + "cm/360 (" + f"{floatSens:.2f}" + " @ " + str(dpi.get()) + " DPI)"

    sensLog = open(sensLogTxt, "a")
    sensLog.write("\n" + formattedSens)

    liveSens = open(liveSensTxt, "w")
    liveSens.write(formattedSens)

    randomsens = open(directory.get() + "/cfg/randomsens.cfg", "w")
    randomsens.write("mouse_sensitivity " + f"{floatSens:.2f}")

    outputSensLabel.configure(text=formattedSens)
    


def toggleSensRandomizer():
    generateAutoExec()
    try:
        if timerInterval.get() < 1:
            timerInterval.set(1)
    except:
        timerInterval.set(10)
    if os.path.isfile(directory.get() + "/cfg/enablerando.cfg"):
        toggle()
        if running:
                keyboard.add_hotkey(updateBindModifiers(), randomize)
                if timerCheck.get():
                    startTimerThread()
        else:
            keyboard.remove_all_hotkeys()
            event.clear()
    else:
        runButton.configure(text="Invalid game path!", bg=btnColor[1])

event = threading.Event()

def startTimerThread():
    event.set()
    timerThread = threading.Thread(target=timerLoop, args=(timerInterval.get(),))
    timerThread.daemon = True
    timerThread.start()

def timerLoop(delay):
    timer = 0
    randomize()
    while event.is_set():
        timer += 1
        if timer == delay*10:
            randomize()
            timer = 0
        time.sleep(0.1)


def recordKey(button):
    k = keyboard.read_key()
    if (k.isalnum() and not len(k) > 1 or k.startswith("f")):
        if len(k) > 1:
            k = str(k).upper()
            button.set(k)
        else:
            button.set(k)
    else:
        button.set("Invalid")
def generateAutoExec():
    save_configuration()
    enablerStr = """#Automatically generated by Apex Sens Randomizer

bind \"w\" \"+forward; exec randomsens\"
bind \"s\" \"+backward; exec randomsens\"
bind \"a\" \"+moveleft; exec randomsens\"
bind \"d\" \"+moveright; exec randomsens\""""
    disableStr = """#Automatically generated by Apex Sens Randomizer

unbind \"w\"
unbind \"s\"
unbind \"a\"
unbind \"d\"
bind \"w\" \"+forward; exec randomsens\"
bind \"s\" \"+backward; exec randomsens\"
bind \"a\" \"+moveleft; exec randomsens\"
bind \"d\" \"+moveright; exec randomsens\"
mouse_sensitivity """ + baseSens.get()

    autoexecStr = "#Automatically generated by Apex Sens Randomizer\n\nbind \"" + enableBind.get() + "\" \"exec enablerando\"\nbind \"" + disableBind.get() + "\" \"exec disablerando\""
    try:
        enableRando = open(directory.get() + "/cfg/enablerando.cfg", "w")
        enableRando.write(enablerStr)
    except FileNotFoundError:
        runButton.configure(text="Incorrect game path!", bg=btnColor[1], state="disabled")
        return
    
    try:
        disableRando = open(directory.get() + "/cfg/disablerando.cfg", "w")
        disableRando.write(disableStr)
    except FileNotFoundError:
        pass

    try:
        with open(directory.get() + "/cfg/autoexec.cfg", 'r+') as autoexec:
            lines = autoexec.readlines()
            line_number = None
            for i, line in enumerate(lines):
                if "enablerando" in line:
                    line_number = i
                    break
            if line_number is not None:
                lines[line_number] = "bind \"" + enableBind.get() + "\" \"exec enablerando\"" + "\n"
            with open(directory.get() + "/cfg/autoexec.cfg", 'w') as autoexec:
                autoexec.writelines(lines)
        
        with open(directory.get() + "/cfg/autoexec.cfg", 'r+') as autoexec:
            lines = autoexec.readlines()
            line_number = None
            for i, line in enumerate(lines):
                if "disablerando" in line:
                    line_number = i
                    break
            if line_number is not None:
                lines[line_number] = "bind \"" + disableBind.get() + "\" \"exec disablerando\"" + "\n"
            else:
                lines[len(lines)-1] = lines[len(lines)-1] + "\n"
                lines.append(autoexecStr)
            with open(directory.get() + "/cfg/autoexec.cfg", 'w') as autoexec:
                autoexec.writelines(lines)
    except FileNotFoundError:
        with open(directory.get() + "/cfg/autoexec.cfg", 'x') as autoexec:
            autoexec.write(autoexecStr)
    finally:
        runButton.configure(text="Start Randomizer", bg="#b0ffb9")


icon = """AAABAAMAEBAAAAEABAAoAQAANgAAABgYAAABAAQA6AEAAF4BAAAgIAAAAQAEAOgCAABGAwAAKAAA
ABAAAAAgAAAAAQAEAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAP///wDs7OwA0dHRALq6ugCysrIA
rKysAJKSkgCIiIgAfX19AGdnZwBYWFgAT09PAEFBQQAvLy8AFhYWAAICAgAAAAx3d8AAAAAAYAAA
BgAAAAsACSAAsAAABQAEEABQAAAEAApQAEAAAAQACd4gQAAABAagDmBAAAAEA/3fIEAAAAUAIzIA
UAAACnhohoegAAADAAVQADAAAAUABEAAUAAACgAEQACgAAAPIARAAvAAAADjAzA+AAAAAA+6q/AA
APgfAADwDwAA4AcAAOAHAADgBwAA4AcAAOAHAADgBwAA4AcAAOAHAADgBwAA4AcAAOAHAADgBwAA
8A8AAPgfAAAoAAAAGAAAADAAAAABAAQAAAAAAMABAAAAAAAAAAAAAAAAAAAAAAAA////APr6+gDp
6ekA0dHRAMXFxQCtra0Am5ubAI2NjQB4eHgAampqAF5eXgBHR0cANDQ0ACAgIAAQEBAAAAAAAAAA
AA/8u7vP8AAAAAAAAPggAAACjwAAAAAAD1AAAAAABfAAAAAACgAAJzAAAKAAAAAA8wAAT2AAAD8A
AAAA4QAAAAAAAB4AAAAA4QAAKjAAAB4AAAAA4QAAT9pgAB4AAAAA4QAAGs31AB4AAAAA4QB7AAH4
AB4AAAAA4QCvUzb4AB4AAAAA4QBP///zAB4AAAAA4AACREQgAA4AAAAA5VVUQzRFVV4AAAAA+ZmZ
jMiZmZ8AAAAA4AAAB3AAAA4AAAAA4QAAB3AAAB4AAAAA8gAAB3AAAC8AAAAA9QAAB3AAAF8AAAAA
DAAAB3AAAMAAAAAAD3AAB3AAB/AAAAAAAPYAB3AAbwAAAAAAAA+0B3BL8AAAAAAAAAAP3d3wAAAA
AP4AfwD8AD8A+AAfAPgAHwDwAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA8A8AAPAPAADwDwAA8A
8AAPAPAADwDwAA8A8AAPAPAADwD4AB8A+AAfAPwAPwD+AH8A/4H/ACgAAAAgAAAAQAAAAAEABAAA
AAAAwAIAAAAAAAAAAAAAAAAAAAAAAAD///8A7OzsAN7e3gC+vr4Ap6enAJiYmACKiooAcnJyAGdn
ZwBcXFwASUlJADU1NQAqKioAGxsbAAsLCwAAAAAAAAAAAAD//u7u7/8AAAAAAAAAAAAPpCERERJK
8AAAAAAAAAAP9AAAAAAAAE/wAAAAAAAADzAAAAAAAAAD8AAAAAAAAPgAAAAjIAAAAI8AAAAAAADx
AAAAr3AAAAAfAAAAAAAAsAAAAFpAAAAACwAAAAAAD5AAAAAAAAAAAAnwAAAAAA+QAAAARzAAAAAJ
8AAAAAAPkAAAAK+RIAAACfAAAAAAD5AAAACP//sQAAnwAAAAAA+QAAAAKJnfcAAJ8AAAAAAPkAAG
gwAAb5AACfAAAAAAD5AADPUAAG+QAAnwAAAAAA+QAAr8mZnfkAAJ8AAAAAAPkAAD/////iAACfAA
AAAAD5AAACREREEAAAnwAAAAAA+AAAAAAAAAAAAI8AAAAAAP2qqqqqmaqqqqrfAAAAAAD7VmZmZc
xWZmZlvwAAAAAA+AAAAAB3AAAAAI8AAAAAAPkAAAAAiAAAAACfAAAAAAD5AAAAAIgAAAAAnwAAAA
AADAAAAACIAAAAAMAAAAAAAA8QAAAAiAAAAAHwAAAAAAAPYAAAAIgAAAAG8AAAAAAAAOAAAACIAA
AADgAAAAAAAAD6AAAAiAAAAK8AAAAAAAAAD5AAAIgAAAnwAAAAAAAAAAD7IACIAAK/AAAAAAAAAA
AAD/pBmRSv8AAAAAAAAAAAAAAP////8AAAAAAAD/wAP//4AB//4AAH/+AAB//AAAP/wAAD/8AAA/
+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4
AAAf+AAAH/wAAD/8AAA//AAAP/4AAH/+AAB//wAA//+AAf//wAP///AP/w=="""

window = tk.Tk()

window.title("Apex Sens Randomizer")
window.resizable(False, False)
icondata = base64.b64decode(icon)
tempFile = "icon.ico"
iconfile = open(tempFile, "wb")
iconfile.write(icondata)
iconfile.close()
window.wm_iconbitmap(tempFile)
os.remove(tempFile)
window.columnconfigure(3, pad=10)


gameDirLabel = tk.Label(window, text="Game directory:")
gameDirLabel.grid(row=0, column=0, sticky=tk.E, padx=4)

directory = tk.StringVar()

gameDir = tk.Entry(window, textvariable=directory)
gameDir.grid(row=0, column=1, padx=5, pady=5, sticky=tk.EW)

selectFolder = tk.Button(window, text="Browse...", command=select_folder)
selectFolder.grid(row=0, column=2, pady=5, sticky=tk.W)

dpiLabel = tk.Label(window, text="Mouse DPI:")
dpiLabel.grid(row=1, column=0, sticky=tk.E, padx=4)

dpi = tk.StringVar()

dpiEntry = ttk.Combobox(window, values=["400", "800", "1600"], validate="key", textvariable=dpi)
dpiEntry.config(validatecommand=(window.register(validate_purenumber_input), "%P"))
dpiEntry.grid(row=1, column=1, padx=5, pady=5)


minSensLabel = tk.Label(window, text="Min sensitivity:")
minSensLabel.grid(row=2, column=0, sticky=tk.E, padx=4)


minSens = tk.StringVar()
maxSens = tk.StringVar()
baseSens = tk.StringVar()


minSensEntry = tk.Entry(window, validate="key", textvariable=minSens)
minSensEntry.config(validatecommand=(window.register(validate_number_input), "%P"))
minSensEntry.grid(row=2, column=1, padx=5, pady=5, sticky=tk.EW)

maxSensLabel = tk.Label(window, text="Max sensitivity:")
maxSensLabel.grid(row=3, column=0, sticky=tk.E, padx=4)

maxSensEntry = tk.Entry(window, validate="key", textvariable=maxSens)
maxSensEntry.config(validatecommand=(window.register(validate_number_input), "%P"))
maxSensEntry.grid(row=3, column=1, padx=5, pady=5, sticky=tk.EW)

baseSensLabel = tk.Label(window, text="Default sensitivity:")
baseSensLabel.grid(row=4, column=0, sticky= tk.E, padx=4)

baseSensEntry = tk.Entry(window, validate="key", textvariable=baseSens)
baseSensEntry.config(validatecommand=(window.register(validate_number_input), "%P"))
baseSensEntry.grid(row=4, column=1, padx=5, pady=5, sticky=tk.EW)

runButton = tk.Button(window, bg="#b0ffb9", text="Start Randomizer", command=toggleSensRandomizer)
runButton.grid(row=6, column=0, columnspan=2, rowspan=1, padx=25, ipady=15, sticky=tk.EW, pady=5)

autoexecButton = tk.Button(window, text="Save settings", command=generateAutoExec)
autoexecButton.grid(row=5, column=0, columnspan=2, padx=25, ipady=3, pady=2, sticky=tk.EW)

hotkeysLabel = tk.Label(window, text="Hotkeys/binds:   ")
hotkeysLabel.grid(row=0, column=2, columnspan=2, sticky=tk.E)

hotkeyLabelFrame = tk.LabelFrame(window, text="")
hotkeyLabelFrame.grid(row=1, column=2, rowspan=3, columnspan=2, sticky="NSEW")

randomizeBind = tk.StringVar(window, "Bind")

randomizeBindButton = tk.Button(window, textvariable=randomizeBind, command=lambda: recordKey(randomizeBind))
randomizeBindButton.grid(row=1, column=3, columnspan=1, sticky=tk.EW, padx=4)

randomizeBindLabel = tk.Label(window, text="Randomize sens:")
randomizeBindLabel.grid(row=1, column=2, sticky=tk.E, padx=4)

ctrlCheck = tk.BooleanVar()
altCheck = tk.BooleanVar()
shiftCheck = tk.BooleanVar()
timerCheck = tk.BooleanVar()
timerInterval = tk.IntVar()
timerInterval.set(10)
def updateBindModifiers():
    global modified_string
    modified_string = randomizeBindButton.cget("text")

    if ctrlCheck.get():
        modified_string = "Ctrl + " + modified_string

    if altCheck.get():
        modified_string = "Alt + " + modified_string

    if shiftCheck.get():
        modified_string = "Shift + " + modified_string

    return modified_string

modifierBoxCtrl = tk.Checkbutton(window, text="Ctrl", variable=ctrlCheck)
modifierBoxCtrl.grid(row=2, column=2, sticky=tk.W, padx=2)

modifierBoxAlt = tk.Checkbutton(window, text="Alt", variable=altCheck)
modifierBoxAlt.grid(row=2, column=2, columnspan=2)

modifierBoxShift = tk.Checkbutton(window, text="Shift", variable=shiftCheck)
modifierBoxShift.grid(row=2, column=3, sticky=tk.E, padx=2)

enableBind = tk.StringVar(window, "Bind")

enableBindButton = tk.Button(window, text="Bind", textvariable=enableBind, command=lambda: recordKey(enableBind))
enableBindButton.grid(row=4, column=3, columnspan=1, sticky=tk.EW, padx=4)

enableBindLabel = tk.Label(window, text="Enable in-game:")
enableBindLabel.grid(row=4, column=2, sticky=tk.E, padx=4)

useTimerBox = tk.Checkbutton(window, text="Timer in seconds:", variable=timerCheck)
useTimerBox.grid(row=3, column=2, sticky=tk.W, padx=2)

timerIntervalEntry = tk.Entry(window, textvariable=timerInterval, validate="key", width=9, validatecommand=(window.register(validate_purenumber_input), "%P"))
timerIntervalEntry.grid(row=3, column=3, padx=2)

disableBind = tk.StringVar(window, "Bind")
disableBindButton = tk.Button(window, text="Bind", textvariable=disableBind, command=lambda: recordKey(disableBind))
disableBindButton.grid(row=5, column=3, columnspan=1, sticky=tk.EW, padx=4)

disableBindLabel = tk.Label(window, text="Disable in-game:")
disableBindLabel.grid(row=5, column=2, sticky=tk.E, padx=4)


def load_configuration():
    try:
        with open("config.json", "r") as config_file:
            configuration = json.load(config_file)
            
            directory.set(configuration.get("directory", ""))
            dpi.set(configuration.get("dpi", ""))
            minSens.set(configuration.get("min_sensitivity", ""))
            maxSens.set(configuration.get("max_sensitivity", ""))
            baseSens.set(configuration.get("base_sensitivity"))
            if configuration.get("randomize_bind", "") != "":
                randomizeBind.set(configuration.get("randomize_bind", ""))
            modifiers = configuration.get("randomize_bind_modifiers")
            if modifiers:
                ctrlCheck.set(modifiers[0])
                altCheck.set(modifiers[1])
                shiftCheck.set(modifiers[2])
            timer = configuration.get("timer")
            if timer:
                timerCheck.set(timer[0])
                timerInterval.set(timer[1])
            if configuration.get("enable_bind", "") != "":
                enableBind.set(configuration.get("enable_bind", ""))
            if configuration.get("disable_bind", "") != "":
                disableBind.set(configuration.get("disable_bind", ""))
        
        print("Configuration loaded successfully")
    except FileNotFoundError:
        print("No configuration file found")

load_configuration()


sensLogTxt = "sensitivity_log.txt"
liveSensTxt = "current_sensitivity.txt"

def save_configuration():
    try:
        if timerInterval.get() < 1:
            timerInterval.set(1)
    except:
        timerInterval.set(10)

    dpi.set(dpi.get() or "800")
    minSens.set(minSens.get() or "0.7")
    maxSens.set(maxSens.get() or "3.8")
    baseSens.set(baseSens.get() or "1.5")
    if randomizeBind.get() == "Bind" or randomizeBind.get() == "Invalid":
        randomizeBind.set("x")
        if not any([ctrlCheck.get(), altCheck.get(), shiftCheck.get()]):
            altCheck.set(True)
    if enableBind.get() == "Bind" or enableBind.get() == "Invalid":
        enableBind.set("F6")
    if disableBind.get() == "Bind" or disableBind.get() == "Invalid":
        disableBind.set("F7")

    if float(maxSens.get()) < float(minSens.get()):
        maxSens.set(str(float(minSens.get()) + 1))

    try:
        configuration = {
            "directory": directory.get(),
            "dpi": dpi.get(),
            "min_sensitivity": minSens.get(),
            "max_sensitivity": maxSens.get(),
            "base_sensitivity": baseSens.get(),
            "randomize_bind": randomizeBind.get(),
            "randomize_bind_modifiers": [str(ctrlCheck.get()), str(altCheck.get()), str(shiftCheck.get())],
            "timer": [str(timerCheck.get()), str(timerInterval.get())],
            "enable_bind": enableBind.get(),
            "disable_bind": disableBind.get()
        }
            
        with open("config.json", "w") as config_file:
            json.dump(configuration, config_file, indent=4)
            
        if float(maxSens.get()) < float(minSens.get()):
            runButton.configure(text="Min sens needs to be < max sens!", bg="#d48e8e", state="disabled")
        else:
            runButton.configure(state="normal")
    except:
        runButton.configure(text="Fill in all settings first!", state="disabled")


outputLabelFrame = tk.LabelFrame(window, text="Current sens")
outputLabelFrame.grid(row=6, column=2, columnspan=2, rowspan=2, padx=2, pady=4, ipadx=40, sticky="NSEW")

outputSensLabel = tk.Label(window, text="Not running")
outputSensLabel.grid(row=6, column=2, columnspan=2, rowspan=2)

btnText = ["Start Randomizer", "Stop Randomizer"]
btnColor = ["#b0ffb9", "#d48e8e"]
btnActive = ["#b3e6b9", "#e09f9f"]
stateToggle = ["normal", "disabled"]
sensStateToggle = ["Not running", "Press " + updateBindModifiers() + "!"]

def openSite(url):
    webbrowser.open_new_tab(url)

torjeLabel = tk.Label(window, text="Created by Torje:")
torjeLabel.grid(row=8, column=0, padx=3, pady=2)

twitchLink = tk.Label(window, text="Twitch", fg="#6441a5", cursor="hand2")
twitchLink.grid(row=8, column=1, pady=2, sticky=tk.W, padx=50)
twitchLink.bind("<Button-1>", lambda e: openSite("https://www.twitch.tv/torje"))

youtubeLink = tk.Label(window, text="YouTube", fg="#c4302b", cursor="hand2")
youtubeLink.grid(row=8, column=1, pady=2, sticky=tk.E)
youtubeLink.bind("<Button-1>", lambda e: openSite("https://www.youtube.com/channel/UCAUkwc3fVqhAtzk8reZfkJw"))

twitterLink = tk.Label(window, text="Twitter", fg="blue", cursor="hand2")
twitterLink.grid(row=8, column=1, pady=2, sticky=tk.W)
twitterLink.bind("<Button-1>", lambda e: openSite("https://twitter.com/Txrje"))


print(tk.font.Font(font=torjeLabel["font"]).actual())

window.mainloop()