import sys
import random
import os
from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QApplication, QFileDialog
from gui import Ui_MainWindow as QtGUI
from PyQt6.QtGui import QKeySequence, QKeyEvent
import datetime
from config import Config
import vdf
import winreg
import threading
import time
import keyboard

def main():

    def toggle():
        ui.running = not ui.running
        print(f"Running: {ui.running}")
        ui.startRandomizerButton.setText(running_text[ui.running])
        for i in disabled_while_running:
            i.setEnabled(not ui.running)

    def start_randomizer():
        generate_autoexec()

        # Flips the "running" switch once it confirms autoexecs have been generated
        if os.path.isfile(ui.gameDirectoryField.text() + "/cfg/enablerando.cfg"):
            toggle()
            if ui.running:
                    keyboard.add_hotkey(ui.randomizeBindButton.text(), randomize)
                    ui.outputLabel.setText(f"Press {ui.randomizeBindButton.text()}")
                    if ui.timerCheckbox.isChecked():
                        startThreadedFunction(timerLoop, ui.timeSpinbox.value())
            else:
                ui.outputLabel.setText(f"Not running")
                reset_sensitivity()
                keyboard.remove_all_hotkeys()
                event.clear()

    def browse_directory():
        browse = QFileDialog.getExistingDirectory(
            None,
            "Select Apex Legends Directory",
            sens_randomizer_directory,
        )
        
        if browse:
            ui.gameDirectoryField.setText(f"{browse}/")

    def findSteamDirectory():
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, R"SOFTWARE\WOW6432Node\Valve\Steam")
        path = winreg.QueryValueEx(key, "InstallPath")
        return path[0]

    def apexLibraryPath(id):
        folders = vdf.load(open(rf"{findSteamDirectory()}\steamapps\libraryfolders.vdf"))
        vdfstring = folders.get("libraryfolders")

        for i in vdfstring.values():
            current_path = i.get("path")
            for j in i.get("apps").keys():
                if j == id:
                    return current_path

    def auto_detect_directory():
        appmanifestpath = rf"{apexLibraryPath(apexID)}\steamapps\appmanifest_{apexID}.acf"
        appmanifest = vdf.load(open(appmanifestpath))
        for i in appmanifest.values():
            print("Path detected: ", rf"{apexLibraryPath(apexID)}\steamapps\common\{i.get('installdir')}")
            ui.gameDirectoryField.setText(rf"{apexLibraryPath(apexID)}\steamapps\common\{i.get('installdir')}")
    
    def startThreadedFunction(function, delay):
        newThread = threading.Thread(target=function, args=(delay,))
        newThread.daemon = True
        newThread.start()

    def timerLoop(delay):
        event.set()
        timer = 0
        randomize()
        while event.is_set():
            timer += 1
            if timer == delay*10:
                randomize()
                timer = 0
            time.sleep(0.1)
    
    def randomize():
        min_float = float(ui.minSensSpinbox.value())
        max_float = float(ui.maxSensSpinbox.value())
        init_RNG = random.uniform(min_float, max_float)
        sens_num_actual = round(init_RNG, 2)
        floatSens = float(sens_num_actual)

        cmRev = str(round((360 / (0.022 * int(ui.dpiSelector.currentText()) * floatSens)) * 2.54, 1))

        formattedSens = cmRev + "cm/360 (" + f"{floatSens:.2f}" + " @ " + str(ui.dpiSelector.currentText()) + " DPI)"

        now = datetime.datetime.now()
        sensLog = open(sens_log_txt, "a")
        sensLog.write("\n[" + now.strftime("%Y-%m-%d %H:%M:%S] ") + formattedSens)

        liveSens = open(live_sens_txt, "w")
        liveSens.write(formattedSens)

        randomsens = open(ui.gameDirectoryField.text() + "/cfg/randomsens.cfg", "w")
        randomsens.write("mouse_sensitivity " + f"{floatSens:.2f}")

        ui.outputLabel.setText(formattedSens)

    def generate_autoexec():
        config.save(ui)
        enableStr = f"""#Automatically generated by Apex Sens Randomizer

bind \"w\" \"+forward; exec randomsens\"
bind \"s\" \"+backward; exec randomsens\"
bind \"a\" \"+moveleft; exec randomsens\"
bind \"d\" \"+moveright; exec randomsens\"
bind \"{ui.disableBindButton.text()}\" \"exec disablerando; exec autoexec\""""
        disableStr = f"""#Automatically generated by Apex Sens Randomizer

unbind \"w\"
unbind \"s\"
unbind \"a\"
unbind \"d\"
bind \"w\" \"+forward\"
bind \"s\" \"+backward\"
bind \"a\" \"+moveleft\"
bind \"d\" \"+moveright\"
bind \"{ui.enableBindButton.text()}\" \"exec enablerando\"
mouse_sensitivity {ui.defaultSensSpinbox.value()}"""

        autoexecStr = f"#Automatically generated by Apex Sens Randomizer\n\nbind \"{ui.enableBindButton.text()}\" \"exec enablerando\""
        try:
            enableRando = open(ui.gameDirectoryField.text() + "/cfg/enablerando.cfg", "w")
            enableRando.write(enableStr)
        except FileNotFoundError:
            ui.startRandomizerButton.setText("Incorrect game path!")
            ui.startRandomizerButton.setEnabled(False)
            return
        
        try:
            disableRando = open(ui.gameDirectoryField.text() + "/cfg/disablerando.cfg", "w")
            disableRando.write(disableStr)
        except FileNotFoundError:
            pass

        try:
            with open(ui.gameDirectoryField.text() + "/cfg/autoexec.cfg", 'r+') as autoexec:
                lines = autoexec.readlines()
                line_number = None
                for i, line in enumerate(lines):
                    if "enablerando" in line:
                        line_number = i
                        break
                if line_number is not None:
                    lines[line_number] = f"bind \"{ui.enableBindButton.text()}\" \"exec enablerando\"\n"
                with open(ui.gameDirectoryField.text() + "/cfg/autoexec.cfg", 'w') as autoexec:
                    autoexec.writelines(lines)
        except FileNotFoundError:
            with open(rf"{ui.gameDirectoryField.text()}/cfg/autoexec.cfg", 'x') as autoexec:
                autoexec.write(autoexecStr)
        finally:
            ui.startRandomizerButton.setText("Start Randomizer")
            ui.startRandomizerButton.setEnabled(True)

    def restrict_key_sequence(key_sequence, allowed_keys):
        new_key_sequence = QKeySequence()
        for key in key_sequence:
            if key in allowed_keys:
                new_key_sequence += key
        return new_key_sequence
    
    def reset_sensitivity():
        randomsens = open(ui.gameDirectoryField.text() + "/cfg/randomsens.cfg", "w")
        randomsens.write(f"mouse_sensitivity {ui.defaultSensSpinbox.value()}")

    
    FROZEN = hasattr(sys, "frozen")
    sens_randomizer_directory = os.path.dirname(sys.executable if FROZEN else os.path.abspath(__file__))

    live_sens_txt = f"{sens_randomizer_directory}/config/current_sensitivity.txt"
    sens_log_txt = f"{sens_randomizer_directory}/config/sensitivity_log.txt"

    ui = QtGUI()
    QApplication.setStyle("fusion")
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui.setupUi(MainWindow)

    apexID = "1172470"
    release_tag = "v1.0.1"
    event = threading.Event()
    running_text = ["Start Randomizer", "Stop Randomizer"]
    disabled_while_running = [ui.gameDirectoryField, ui.dpiSelector,        ui.autoDetectButton,
                              ui.browseButton,       ui.defaultSensSpinbox, ui.minSensSpinbox,
                              ui.maxSensSpinbox,     ui.saveSettingsButton, ui.enableBindButton,
                              ui.disableBindButton,  ui.timerCheckbox,      ui.timeSpinbox,
                              ui.randomizeBindButton]
    
    config = Config(sens_randomizer_directory)
    config.load(ui)
    ui.running = False
    ui.startRandomizerButton.clicked.connect(start_randomizer)
    ui.browseButton.clicked.connect(browse_directory)
    ui.autoDetectButton.clicked.connect(auto_detect_directory)
    ui.saveSettingsButton.clicked.connect(generate_autoexec)
    
    print(sens_randomizer_directory)
    MainWindow.show()
    
    sys.exit(app.exec())
    


if __name__ == "__main__":
    main()
